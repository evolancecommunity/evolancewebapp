version: '3.8'

services:
  # MongoDB Atlas (External - no container needed)
  # Using: mongodb+srv://waitlist:unumau@evolance-waitlist.oy1zgcg.mongodb.net/

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: evolance-backend
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb+srv://waitlist:unumau@evolance-waitlist.oy1zgcg.mongodb.net/?retryWrites=true&w=majority&appName=evolance-waitlist
      - DB_NAME=evolance_webapp
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ./backend/ai_models:/app/ai_models
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: evolance-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_BACKEND_URL=${BACKEND_URL}
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: evolance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    container_name: evolance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: evolance-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: evolance-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: evolance-network 